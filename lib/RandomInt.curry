------------------------------------------------------------------------------
--- Library for pseudo-random number generation in Curry.
--- <P>
--- This library provides operations for generating pseudo-random
--- number sequences.
--- For any given seed, the sequences generated by the operations
--- in this module should be <B>identical</B> to the sequnces
--- generated by the java.util.Random package.
--- <P>
--- The algorithm is take from 
--- http://en.wikipedia.org/wiki/Random_number_generation
--- There is an assumption that all operations are implicitly
--- executed mod 2^32 (unsigned 32-bit integers) !!!
--- GHC computes between -2^29 and 2^29-1,  thus the sequence
--- is NOT as random as one would like.
---
--- m_w = <choose-initializer>;    /* must not be zero */
--- m_z = <choose-initializer>;    /* must not be zero */
---  
--- uint get_random()
--- {
---     m_z = 36969 * (m_z & 65535) + (m_z >> 16);
---     m_w = 18000 * (m_w & 65535) + (m_w >> 16);
---     return (m_z << 16) + m_w;  /* 32-bit result */
--- }
---
--- @author Sergio Antoy (with extensions by Michael Hanus)
--- @version Fri Jun 10 12:49:36 PDT 2011
------------------------------------------------------------------------------

module RandomInt(nextInt, nextIntRange, nextBoolean, getRandomSeed) where

import Time
import System(getCPUTime)

zfact = 36969
wfact = 18000
two16 = 65536
large = 536870911 -- 2^29 - 1
------------------------------------------------------------------
--                       Public Operations
------------------------------------------------------------------

--- Returns a sequence of pseudorandom, integer values.
--- 
--- @param seed - The seed of the random sequence.

nextInt :: Int -> [Int]
nextInt seed =
  let ns = if seed == 0 then 1 else seed
      next2 mw mz =
          let mza = zfact * (mz `mod` two16) + (mz * two16)
              mwa = wfact * (mw `mod` two16) + (mw * two16)
              tmp = (mza `div` two16 + mwa)
	      res = if tmp < 0 then tmp+large else tmp
          in tmp : next2 mwa mza 
  in next2 ns ns

--- Returns a pseudorandom sequence of values
--- between 0 (inclusive) and the specified value (exclusive).
---
--- @param seed - The seed of the random sequence.
--- @param n - The bound on the random number to be returned. 
---            Must be positive.

nextIntRange :: Int -> Int -> [Int]
nextIntRange seed n | n>0
    = map (`mod` n) (nextInt seed)
                            
--- Returns a pseudorandom sequence of
--- <code>boolean</code> values. 
---
--- @param seed - The seed of the random sequence.

nextBoolean :: Int -> [Bool]
nextBoolean seed = map (/= 0) (nextInt seed)


--- Returns a time-dependent integer number as a seed for really random numbers.
--- Should only be used as a seed for pseudorandom number sequence
--- and not as a random number since the precision is limited to milliseconds

getRandomSeed :: IO Int
getRandomSeed =
  getClockTime >>= \time ->
  getCPUTime >>= \msecs ->
  let (CalendarTime y mo d h m s _) = toUTCTime time
   in return ((y+mo+d+h+m*s*msecs) `mod` two16)
                            
{-     Simple tests and examples

testInt = take 20 (nextInt 0)

testIntRange = take 120 (nextIntRange 0 6)

testBoolean = take 20 (nextBoolean 0)

reallyRandom = do seed <- getRandomSeed
                  putStrLn (show (take 20 (nextIntRange seed 100)))
-}
