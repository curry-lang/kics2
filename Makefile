########################################################################
# Makefile for KiCS2 compiler suite
########################################################################

# Is this a global installation (with restricted functionality)(yes/no)?
GLOBALINSTALL=yes
# The major version number:
export MAJORVERSION    = 0
# The minor version number:
export MINORVERSION    = 2
# The revision version number:
export REVISIONVERSION = 1
# Complete version:
export VERSION         = $(MAJORVERSION).$(MINORVERSION).$(REVISIONVERSION)
# The version date
COMPILERDATE = 04/07/12
# The installation date
INSTALLDATE := $(shell date)

# the root directory
export ROOT     = $(CURDIR)
# binary directory and executables
export BINDIR   = ${ROOT}/bin
# Directory where the libraries are located:
export LIBDIR   = ${ROOT}/lib
# Directory where local executables are stored:
export LOCALBIN = ${BINDIR}/.local
# The compiler binary
export COMP     = ${LOCALBIN}/kics2c
# The REPL binary
export REPL     = ${LOCALBIN}/kics2i
# The frontend binary
export CYMAKE   = $(LOCALBIN)/cymake

# The Haskell installation info
export INSTALLHS     = $(ROOT)/runtime/Installation.hs
# The Curry installation info
export INSTALLCURRY  = $(ROOT)/src/Installation.curry
# The version information for the manual:
MANUALVERSION = $(ROOT)/docs/src/version.tex
# Logfiles for make:
MAKELOG = make.log
BOOTLOG = boot.log
# The path to the Glasgow Haskell Compiler:
GHC := $(shell which ghc)
# The path to the package configuration file
PKGCONF:= $(shell ghc-pkg --user -v0 list | head -1 | sed "s/://")

# main (default) target: starts installation with logging
.PHONY: all
all:
	${MAKE} installwithlogging

# bootstrap the compiler
.PHONY: bootstrap
bootstrap: ${INSTALLCURRY} frontend scripts
	@rm -f ${BOOTLOG}
	@echo "Bootstrapping started at `date`" > ${BOOTLOG}
	cd src && ${MAKE} bootstrap 2>&1 | tee -a ../${BOOTLOG}
	@echo "Bootstrapping finished at `date`" >> ${BOOTLOG}
	@echo "Bootstrap process logged in file ${BOOTLOG}"

# install the complete system and log the installation process
.PHONY: installwithlogging
installwithlogging:
	@rm -f ${MAKELOG}
	@echo "Make started at `date`" > ${MAKELOG}
	${MAKE} install 2>&1 | tee -a ${MAKELOG}
	@echo "Make finished at `date`" >> ${MAKELOG}
	@echo "Make process logged in file ${MAKELOG}"

# install the complete system if the kics2 compiler is present
.PHONY: install
install: kernel
	cd cpns  && ${MAKE} # Curry Port Name Server demon
	cd tools && ${MAKE} # various tools
	cd www   && ${MAKE} # scripts for dynamic web pages
	${MAKE} manual
	# make everything accessible:
	chmod -R go+rX .

# install a kernel system without all tools
.PHONY: kernel
kernel: ${INSTALLCURRY} frontend scripts
	${MAKE} Compile
	${MAKE} REPL
ifeq ($(GLOBALINSTALL),yes)
	# compile all libraries for a global installation
	cd runtime && ${MAKE}
	cd lib     && ${MAKE} compilelibs
	cd lib     && ${MAKE} installlibs
	cd lib     && ${MAKE} acy
endif

# install required cabal packages
.PHONY: installhaskell
installhaskell:
	cabal update
	cabal install network
	cabal install parallel
	cabal install tree-monad
	cabal install parallel-tree-search
	cabal install mtl

.PHONY: clean
clean:
	rm -f *.log
	rm -f ${INSTALLHS} ${INSTALLCURRY}
	cd benchmarks && ${MAKE} clean
	cd cpns       && ${MAKE} clean
	@if [ -d lib/.curry/kics2 ] ; then \
	  cd lib/.curry/kics2 && rm -f *.hi *.o ; \
	fi
	@if [ -d lib/meta/.curry/kics2 ] ; then \
	  cd lib/meta/.curry/kics2 && rm -f *.hi *.o ; \
	fi
	cd runtime    && ${MAKE} clean
	cd src        && ${MAKE} clean
	cd tools      && ${MAKE} clean
	cd www        && ${MAKE} clean

# clean everything (including compiler binaries)
.PHONY: cleanall
cleanall: clean
	cd src && $(MAKE) cleanall
	$(BINDIR)/cleancurry -r
	rm -rf ${LOCALBIN}
#	$(MAKE) cleanscripts

##############################################################################
# Building the compiler itself
##############################################################################

.PHONY: Compile
Compile: ${INSTALLCURRY} scripts
	cd src && ${MAKE} CompileBoot

.PHONY: REPL
REPL: ${INSTALLCURRY} scripts
	cd src && ${MAKE} REPLBoot

# generate module with basic installation information:
${INSTALLCURRY}: ${INSTALLHS}
	cp ${INSTALLHS} ${INSTALLCURRY}

${INSTALLHS}: Makefile
	@if [ ! -x "${GHC}" ] ; then \
	  echo "No executable 'ghc' found in path!" && exit 1; \
	fi
	echo "-- This file is automatically generated, do not change it!" > $@
	echo "module Installation where" >> $@
	echo "" >> $@
	echo 'compilerName :: String' >> $@
	echo 'compilerName = "KiCS2 Curry -> Haskell Compiler"' >> $@
	echo "" >> $@
	echo 'installDir :: String' >> $@
	echo 'installDir = "$(ROOT)"' >> $@
	echo "" >> $@
	echo 'majorVersion :: Int' >> $@
	echo 'majorVersion = $(MAJORVERSION)' >> $@
	echo "" >> $@
	echo 'minorVersion :: Int' >> $@
	echo 'minorVersion = $(MINORVERSION)' >> $@
	echo "" >> $@
	echo 'revisionVersion :: Int' >> $@
	echo 'revisionVersion = $(REVISIONVERSION)' >> $@
	echo "" >> $@
	echo 'compilerDate :: String' >> $@
	echo 'compilerDate = "$(COMPILERDATE)"' >> $@
	echo "" >> $@
	echo 'installDate :: String' >> $@
	echo 'installDate = "$(INSTALLDATE)"' >> $@
	echo "" >> $@
	echo 'ghcExec :: String' >> $@
	echo 'ghcExec = "${GHC} -no-user-package-conf -package-conf ${PKGCONF}"' >> $@
	echo "" >> $@
	echo 'installGlobal :: Bool' >> $@
ifeq ($(GLOBALINSTALL),yes)
	echo 'installGlobal = True' >> $@
else
	echo 'installGlobal = False' >> $@
endif

##############################################################################
# Installation of shell scripts
##############################################################################

# install some scripts of KICS2 in the bin directory
scripts=cleancurry cymake kics2 makecurrycgi

.PHONY: scripts
scripts: $(foreach script,$(scripts),$(BINDIR)/$(script))
	@echo "Scripts generated."

$(BINDIR)/%: src/%.sh
	mkdir -p ${BINDIR}
	sed "s|^KICS2HOME=.*$$|KICS2HOME=${ROOT}|" < $< > $@
	chmod 755 $@

.PHONY: cleanscripts
cleanscripts: $(foreach script,$(scripts),$(BINDIR)/$(script))
	rm -f $^

##############################################################################
# Create documentation for system libraries:
##############################################################################

.PHONY: libdoc
libdoc:
	@if [ ! -r bin/currydoc ] ; then \
	  echo "Cannot create library documentation: currydoc not available!" ; exit 1 ; fi
	@rm -f ${MAKELOG}
	@echo "Make libdoc started at `date`" > ${MAKELOG}
	@cd lib && ${MAKE} doc 2>&1 | tee -a ../${MAKELOG}
	@echo "Make libdoc finished at `date`" >> ${MAKELOG}
	@echo "Make libdoc process logged in file ${MAKELOG}"

##############################################################################
# Create the KiCS2 manual
##############################################################################

.PHONY: manual
manual:
	# generate manual, if necessary:
	@if [ -d docs/src ] ; then \
	  ${MAKE} ${MANUALVERSION} && cd docs/src && ${MAKE} install ; \
	fi

${MANUALVERSION}: Makefile
	echo '\\newcommand{\\kicsversiondate}'         >  $@
	echo '{Version $(VERSION) of ${COMPILERDATE}}' >> $@

.PHONY: cleanmanual
cleanmanual:
	if [ -d docs/src ] ; then \
	  cd docs/src && $(MAKE) clean ; \
	fi

##############################################################################
# Installation of frontend
##############################################################################

# repository with new front-end:
FRONTENDREPO=git://git-ps.informatik.uni-kiel.de/curry

# install the sources of the front end from its repository
.PHONY: frontend
frontend: $(CYMAKE)

$(CYMAKE): $(HOME)/.cabal/bin/cymake
	# copy cabal installation of front end into local directory
	mkdir -p $(LOCALBIN)
	cp -p $< $@

$(HOME)/.cabal/bin/cymake:
	$(MAKE) clonefrontend
	cd frontend/curry-base     && cabal install # --force-reinstalls
	cd frontend/curry-frontend && cabal install # --force-reinstalls

# Retrieves a fresh clone of the frontend IF IT IS NOT ALREADY PRESENT.
.PHONY: clonefrontend
clonefrontend:
	mkdir -p frontend # ensure frontend directory
	if [ ! -d frontend/curry-base ] ; then \
	  cd frontend ; \
	  git clone ${FRONTENDREPO}/curry-base.git ; \
	fi
	if [ ! -d frontend/curry-frontend ] ; then \
	  cd frontend ; \
	  git clone ${FRONTENDREPO}/curry-frontend.git ; \
	fi

.PHONY: updatefrontend
updatefrontend:
	if [ -d frontend ] ; then \
	  cd frontend/curry-base && git pull ; \
	  cd ../curry-frontend   && git pull ; \
	else \
	  $(MAKE) clonefrontend ; \
	fi

##############################################################################
# Create distribution versions of the complete system as tar file kics2.tar.gz
##############################################################################

# temporary directory to create distribution version
KICS2DIST=/tmp/kics2
TARBALL=kics2-$(VERSION).tar.gz

# generate a source distribution of KICS2:
.PHONY: dist
dist:
	# remove old distribution
	rm -rf $(TARBALL) ${KICS2DIST}
	# initialise git repository
	git clone . ${KICS2DIST}
	cd ${KICS2DIST} && git submodule init && git submodule update
	# create local binary directory
	mkdir -p ${KICS2DIST}/bin/.local
	# copy or install frontend sources in distribution
	if [ -d frontend ] ; then \
	  cp -pr frontend ${KICS2DIST} ; \
	  cp -pr $(CYMAKE) ${KICS2DIST}/bin/.local/ ; \
	else \
	  cd ${KICS2DIST} && ${MAKE} frontend ; \
	fi
	# copy bootstrap compiler
	cp $(COMP) ${KICS2DIST}/bin/.local/
	# generate compile and REPL in order to have the bootstrapped
	# Haskell translations in the distribution
	cd ${KICS2DIST} && ${MAKE} Compile   # translate compiler
	cd ${KICS2DIST} && ${MAKE} REPL      # translate REPL
	cd ${KICS2DIST} && ${MAKE} clean     # clean object files
	cd ${KICS2DIST} && ${MAKE} cleandist # delete unnessary files
	# copy documentation
	@if [ -f docs/Manual.pdf ] ; then \
	  cp docs/Manual.pdf ${KICS2DIST}/docs ; \
	fi
	cat Makefile | sed -e "/distribution/,\$$d"        \
	  | sed 's|^GLOBALINSTALL=.*$$|GLOBALINSTALL=yes|' \
	  > ${KICS2DIST}/Makefile
	cd /tmp && tar cf kics2.tar kics2 && gzip kics2.tar
	mv /tmp/kics2.tar.gz ./$(TARBALL)
	chmod 644 $(TARBALL)
	rm -rf ${KICS2DIST}
	@echo "----------------------------------------------------------------"
	@echo "Distribution $(TARBALL) generated."

# publish the distribution files in the local web pages
HTMLDIR=${HOME}/public_html/kics2/download
.PHONY: publish
publish:
	cp $(TARBALL) docs/INSTALL.html ${HTMLDIR}
	chmod -R go+rX ${HTMLDIR}
	@echo "Don't forget to run 'update-kics2' to make the update visible!"

# Clean all files that should not be included in a distribution
.PHONY: cleandist
cleandist:
	rm -rf .git .gitmodules .gitignore
	rm -rf lib/.git
	cd frontend/curry-base     && rm -rf .git .gitignore dist
	cd frontend/curry-frontend && rm -rf .git .gitignore dist
	rm -rf bin # clean executables
	rm -rf docs/src docs/*
	rm -rf benchmarks debug experiments papers talks
